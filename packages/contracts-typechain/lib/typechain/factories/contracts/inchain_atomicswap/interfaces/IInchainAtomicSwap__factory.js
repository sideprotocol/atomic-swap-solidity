"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IInchainAtomicSwap__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        name: "DuplicateReleaseSchedule",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidAddress",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidBuyerFee",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "provided",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "maximum",
                type: "uint256",
            },
        ],
        name: "InvalidExpirationTime",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
        ],
        name: "InvalidMinBidAmount",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidReleasePercentage",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidSellerFee",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidSigners",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidTotalPercentage",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidTreasuryAddress",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "real",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "expected",
                type: "uint256",
            },
        ],
        name: "NotEnoughFund",
        type: "error",
    },
    {
        inputs: [],
        name: "OrderAlreadyExists",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "current",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "expiredTime",
                type: "uint256",
            },
        ],
        name: "OrderAlreadyExpired",
        type: "error",
    },
    {
        inputs: [],
        name: "OverMaximumReleaseStep",
        type: "error",
    },
    {
        inputs: [],
        name: "UnauthorizedSender",
        type: "error",
    },
    {
        inputs: [],
        name: "UnsupportedTokenPair",
        type: "error",
    },
    {
        inputs: [],
        name: "ZeroReleaseSchedule",
        type: "error",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "orderID",
                type: "bytes32",
            },
            {
                indexed: true,
                internalType: "address",
                name: "bidder",
                type: "address",
            },
            {
                indexed: true,
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
        ],
        name: "AcceptedBid",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "id",
                type: "bytes32",
            },
        ],
        name: "AtomicSwapOrderCreated",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "id",
                type: "bytes32",
            },
            {
                indexed: true,
                internalType: "address",
                name: "maker",
                type: "address",
            },
            {
                indexed: true,
                internalType: "address",
                name: "taker",
                type: "address",
            },
        ],
        name: "AtomicSwapOrderTook",
        type: "event",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uuid",
                        type: "bytes32",
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "token",
                                type: "address",
                            },
                            {
                                internalType: "uint256",
                                name: "amount",
                                type: "uint256",
                            },
                        ],
                        internalType: "struct IAtomicSwapBase.Coin",
                        name: "sellToken",
                        type: "tuple",
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "token",
                                type: "address",
                            },
                            {
                                internalType: "uint256",
                                name: "amount",
                                type: "uint256",
                            },
                        ],
                        internalType: "struct IAtomicSwapBase.Coin",
                        name: "buyToken",
                        type: "tuple",
                    },
                    {
                        internalType: "address",
                        name: "desiredTaker",
                        type: "address",
                    },
                    {
                        internalType: "uint256",
                        name: "minBidAmount",
                        type: "uint256",
                    },
                    {
                        internalType: "bool",
                        name: "acceptBid",
                        type: "bool",
                    },
                    {
                        internalType: "bool",
                        name: "completeByBid",
                        type: "bool",
                    },
                    {
                        internalType: "bool",
                        name: "withdrawToSellerAccount",
                        type: "bool",
                    },
                    {
                        internalType: "bool",
                        name: "withdrawToBuyerAccount",
                        type: "bool",
                    },
                    {
                        components: [
                            {
                                internalType: "uint256",
                                name: "durationInHours",
                                type: "uint256",
                            },
                            {
                                internalType: "uint256",
                                name: "percentage",
                                type: "uint256",
                            },
                        ],
                        internalType: "struct IAtomicSwapBase.Release[]",
                        name: "releases",
                        type: "tuple[]",
                    },
                    {
                        components: [
                            {
                                internalType: "uint8",
                                name: "v",
                                type: "uint8",
                            },
                            {
                                internalType: "bytes32",
                                name: "r",
                                type: "bytes32",
                            },
                            {
                                internalType: "bytes32",
                                name: "s",
                                type: "bytes32",
                            },
                            {
                                internalType: "address",
                                name: "owner",
                                type: "address",
                            },
                            {
                                internalType: "uint256",
                                name: "deadline",
                                type: "uint256",
                            },
                        ],
                        internalType: "struct IAtomicSwapBase.PermitSignature",
                        name: "sellerSignature",
                        type: "tuple",
                    },
                    {
                        components: [
                            {
                                internalType: "uint8",
                                name: "v",
                                type: "uint8",
                            },
                            {
                                internalType: "bytes32",
                                name: "r",
                                type: "bytes32",
                            },
                            {
                                internalType: "bytes32",
                                name: "s",
                                type: "bytes32",
                            },
                            {
                                internalType: "address",
                                name: "owner",
                                type: "address",
                            },
                            {
                                internalType: "uint256",
                                name: "deadline",
                                type: "uint256",
                            },
                        ],
                        internalType: "struct IAtomicSwapBase.PermitSignature",
                        name: "buyerSignature",
                        type: "tuple",
                    },
                ],
                internalType: "struct IAtomicSwapBase.SwapWithPermitMsg",
                name: "swap",
                type: "tuple",
            },
        ],
        name: "executeSwapWithPermit",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];
class IInchainAtomicSwap__factory {
    static createInterface() {
        return new ethers_1.Interface(_abi);
    }
    static connect(address, runner) {
        return new ethers_1.Contract(address, _abi, runner);
    }
}
exports.IInchainAtomicSwap__factory = IInchainAtomicSwap__factory;
IInchainAtomicSwap__factory.abi = _abi;
//# sourceMappingURL=IInchainAtomicSwap__factory.js.map