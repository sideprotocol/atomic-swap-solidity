"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IAtomicSwapBase__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        name: "DuplicateReleaseSchedule",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidAddress",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidBuyerFee",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "provided",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "maximum",
                type: "uint256",
            },
        ],
        name: "InvalidExpirationTime",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
        ],
        name: "InvalidMinBidAmount",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidReleasePercentage",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidSellerFee",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidSigers",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidTotalPercentage",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidTreasuryAddress",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "real",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "expected",
                type: "uint256",
            },
        ],
        name: "NotEnoughFund",
        type: "error",
    },
    {
        inputs: [],
        name: "OrderAlreadyExists",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "current",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "expiredTime",
                type: "uint256",
            },
        ],
        name: "OrderAlreadyExpired",
        type: "error",
    },
    {
        inputs: [],
        name: "OverMaximumReleaseStep",
        type: "error",
    },
    {
        inputs: [],
        name: "UnauthorizedSender",
        type: "error",
    },
    {
        inputs: [],
        name: "UnsupportedTokenPair",
        type: "error",
    },
    {
        inputs: [],
        name: "ZeroReleaseSchedule",
        type: "error",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "orderID",
                type: "bytes32",
            },
            {
                indexed: true,
                internalType: "address",
                name: "bidder",
                type: "address",
            },
            {
                indexed: true,
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
        ],
        name: "AcceptedBid",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "id",
                type: "bytes32",
            },
        ],
        name: "AtomicSwapOrderCreated",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "maker",
                type: "address",
            },
            {
                indexed: true,
                internalType: "address",
                name: "taker",
                type: "address",
            },
            {
                indexed: true,
                internalType: "bytes32",
                name: "id",
                type: "bytes32",
            },
        ],
        name: "AtomicSwapOrderTook",
        type: "event",
    },
];
class IAtomicSwapBase__factory {
    static createInterface() {
        return new ethers_1.Interface(_abi);
    }
    static connect(address, runner) {
        return new ethers_1.Contract(address, _abi, runner);
    }
}
exports.IAtomicSwapBase__factory = IAtomicSwapBase__factory;
IAtomicSwapBase__factory.abi = _abi;
//# sourceMappingURL=IAtomicSwapBase__factory.js.map