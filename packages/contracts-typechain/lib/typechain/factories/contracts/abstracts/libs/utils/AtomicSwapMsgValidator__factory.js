"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AtomicSwapMsgValidator__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        name: "InactiveOrder",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "contractAddress",
                type: "address",
            },
        ],
        name: "InvalidContractAddress",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "provided",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "maximum",
                type: "uint256",
            },
        ],
        name: "InvalidExpirationTime",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidMinimumBidLimit",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidTotalPercentage",
        type: "error",
    },
    {
        inputs: [],
        name: "OverMaximumReleaseStep",
        type: "error",
    },
    {
        inputs: [],
        name: "UnauthorizedCancelAction",
        type: "error",
    },
    {
        inputs: [],
        name: "UnauthorizedSender",
        type: "error",
    },
    {
        inputs: [],
        name: "UnauthorizedTakeAction",
        type: "error",
    },
    {
        inputs: [],
        name: "ZeroReleaseSchedule",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "_addr",
                type: "address",
            },
        ],
        name: "isContract",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uuid",
                        type: "bytes32",
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "token",
                                type: "address",
                            },
                            {
                                internalType: "uint256",
                                name: "amount",
                                type: "uint256",
                            },
                        ],
                        internalType: "struct IAtomicSwapBase.Coin",
                        name: "sellToken",
                        type: "tuple",
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "token",
                                type: "address",
                            },
                            {
                                internalType: "uint256",
                                name: "amount",
                                type: "uint256",
                            },
                        ],
                        internalType: "struct IAtomicSwapBase.Coin",
                        name: "buyToken",
                        type: "tuple",
                    },
                    {
                        internalType: "address",
                        name: "maker",
                        type: "address",
                    },
                    {
                        internalType: "address",
                        name: "desiredTaker",
                        type: "address",
                    },
                    {
                        internalType: "uint256",
                        name: "minBidAmount",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "expireAt",
                        type: "uint256",
                    },
                    {
                        internalType: "bool",
                        name: "acceptBid",
                        type: "bool",
                    },
                ],
                internalType: "struct IAtomicSwapBase.MakeSwapMsg",
                name: "makeswap",
                type: "tuple",
            },
        ],
        name: "validateMakeSwapParams",
        outputs: [],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "orderID",
                        type: "bytes32",
                    },
                    {
                        internalType: "address",
                        name: "takerReceiver",
                        type: "address",
                    },
                ],
                internalType: "struct IAtomicSwapBase.TakeSwapMsg",
                name: "takeswap",
                type: "tuple",
            },
        ],
        name: "validateTakeSwapParams",
        outputs: [],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "durationInHours",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "percentage",
                        type: "uint256",
                    },
                ],
                internalType: "struct IAtomicSwapBase.Release[]",
                name: "releases",
                type: "tuple[]",
            },
        ],
        name: "validateVestingParams",
        outputs: [],
        stateMutability: "pure",
        type: "function",
    },
];
const _bytecode = "0x610ea6610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c8063162790551461007157806333b988f5146100a15780637aa10b6a146100bd5780639a0ebe00146100d9578063c27eeaac146100f5578063c3aee15d14610111575b600080fd5b61008b600480360381019061008691906107e9565b61012d565b6040516100989190610831565b60405180910390f35b6100bb60048036038101906100b69190610a30565b610146565b005b6100d760048036038101906100d29190610aaf565b610249565b005b6100f360048036038101906100ee9190610c5a565b6103a3565b005b61010f600480360381019061010a9190610cd8565b61060f565b005b61012b60048036038101906101269190610aaf565b61067c565b005b600080823b905060008163ffffffff1611915050919050565b6000815103610181576040517ffd68e07a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805b82518110156101cd578281815181106101a1576101a0610d05565b5b602002602001015160200151826101b89190610d63565b915080806101c590610d97565b915050610185565b506127108114610209576040517f0b8ad7f100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b609682511115610245576040517f1531e37f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b600073ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141580156102fa57503373ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15610331576040517fbe544a2b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600381111561034557610344610ddf565b5b8160010160009054906101000a900460ff16600381111561036957610368610ddf565b5b036103a0576040517fd4dbb56500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b600073ffffffffffffffffffffffffffffffffffffffff1681602001516000015173ffffffffffffffffffffffffffffffffffffffff16141580156103f657506103f481602001516000015161012d565b155b15610440578060200151600001516040517f19bb40290000000000000000000000000000000000000000000000000000000081526004016104379190610e1d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1681604001516000015173ffffffffffffffffffffffffffffffffffffffff1614158015610493575061049181604001516000015161012d565b155b156104dd578060400151600001516040517f19bb40290000000000000000000000000000000000000000000000000000000081526004016104d49190610e1d565b60405180910390fd5b60008160a001511161051b576040517f5fe07c7d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806105865750806060015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156105bd576040517f0809490800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b428160c00151101561060c578060c00151426040517ff00605cf000000000000000000000000000000000000000000000000000000008152600401610603929190610e47565b60405180910390fd5b50565b600073ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1603610679576040517f0809490800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b3373ffffffffffffffffffffffffffffffffffffffff168160010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610705576040517f978f045600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600381111561071957610718610ddf565b5b8160010160009054906101000a900460ff16600381111561073d5761073c610ddf565b5b14610774576040517fd4dbb56500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107b68261078b565b9050919050565b6107c6816107ab565b81146107d157600080fd5b50565b6000813590506107e3816107bd565b92915050565b6000602082840312156107ff576107fe610781565b5b600061080d848285016107d4565b91505092915050565b60008115159050919050565b61082b81610816565b82525050565b60006020820190506108466000830184610822565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61089a82610851565b810181811067ffffffffffffffff821117156108b9576108b8610862565b5b80604052505050565b60006108cc610777565b90506108d88282610891565b919050565b600067ffffffffffffffff8211156108f8576108f7610862565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000819050919050565b61092681610913565b811461093157600080fd5b50565b6000813590506109438161091d565b92915050565b60006040828403121561095f5761095e61090e565b5b61096960406108c2565b9050600061097984828501610934565b600083015250602061098d84828501610934565b60208301525092915050565b60006109ac6109a7846108dd565b6108c2565b905080838252602082019050604084028301858111156109cf576109ce610909565b5b835b818110156109f857806109e48882610949565b8452602084019350506040810190506109d1565b5050509392505050565b600082601f830112610a1757610a1661084c565b5b8135610a27848260208601610999565b91505092915050565b600060208284031215610a4657610a45610781565b5b600082013567ffffffffffffffff811115610a6457610a63610786565b5b610a7084828501610a02565b91505092915050565b6000819050919050565b610a8c81610a79565b8114610a9757600080fd5b50565b600081359050610aa981610a83565b92915050565b600060208284031215610ac557610ac4610781565b5b6000610ad384828501610a9a565b91505092915050565b6000819050919050565b610aef81610adc565b8114610afa57600080fd5b50565b600081359050610b0c81610ae6565b92915050565b600060408284031215610b2857610b2761090e565b5b610b3260406108c2565b90506000610b42848285016107d4565b6000830152506020610b5684828501610934565b60208301525092915050565b610b6b81610816565b8114610b7657600080fd5b50565b600081359050610b8881610b62565b92915050565b60006101408284031215610ba557610ba461090e565b5b610bb06101006108c2565b90506000610bc084828501610afd565b6000830152506020610bd484828501610b12565b6020830152506060610be884828501610b12565b60408301525060a0610bfc848285016107d4565b60608301525060c0610c10848285016107d4565b60808301525060e0610c2484828501610934565b60a083015250610100610c3984828501610934565b60c083015250610120610c4e84828501610b79565b60e08301525092915050565b60006101408284031215610c7157610c70610781565b5b6000610c7f84828501610b8e565b91505092915050565b600060408284031215610c9e57610c9d61090e565b5b610ca860406108c2565b90506000610cb884828501610afd565b6000830152506020610ccc848285016107d4565b60208301525092915050565b600060408284031215610cee57610ced610781565b5b6000610cfc84828501610c88565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d6e82610913565b9150610d7983610913565b9250828201905080821115610d9157610d90610d34565b5b92915050565b6000610da282610913565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610dd457610dd3610d34565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b610e17816107ab565b82525050565b6000602082019050610e326000830184610e0e565b92915050565b610e4181610913565b82525050565b6000604082019050610e5c6000830185610e38565b610e696020830184610e38565b939250505056fea26469706673582212208ed905502634c6b744376efe384da6b15ef94938c8ecf71c2d681b1445d3a6c964736f6c63430008140033";
const isSuperArgs = (xs) => xs.length > 1;
class AtomicSwapMsgValidator__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static createInterface() {
        return new ethers_1.Interface(_abi);
    }
    static connect(address, runner) {
        return new ethers_1.Contract(address, _abi, runner);
    }
}
exports.AtomicSwapMsgValidator__factory = AtomicSwapMsgValidator__factory;
AtomicSwapMsgValidator__factory.bytecode = _bytecode;
AtomicSwapMsgValidator__factory.abi = _abi;
//# sourceMappingURL=AtomicSwapMsgValidator__factory.js.map