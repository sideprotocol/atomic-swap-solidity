/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  AnteHandler,
  AnteHandlerInterface,
} from "../../../../../contracts/abstracts/libs/utils/AnteHandler";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "real",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "expected",
        type: "uint256",
      },
    ],
    name: "NotEnoughFund",
    type: "error",
  },
] as const;

const _bytecode =
  "0x610b6b610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c806306cf228014610045578063baa21b8c1461006e575b600080fd5b81801561005157600080fd5b5061006c60048036038101906100679190610619565b610097565b005b81801561007a57600080fd5b5061009560048036038101906100909190610619565b610130565b005b60008284866100a691906106d5565b6100b09190610746565b9050600081866100c09190610777565b9050600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161461011157610101888883610211565b61010c888484610211565b610126565b61011b8782610347565b6101258383610347565b5b5050505050505050565b600082848661013f91906106d5565b6101499190610746565b9050600081866101599190610777565b9050600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16146101ac5761019b88338984610447565b6101a788338585610447565b610207565b8534146101f25734866040517f04157bb40000000000000000000000000000000000000000000000000000000081526004016101e99291906107ba565b60405180910390fd5b6101fc8782610347565b6102068383610347565b5b5050505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040516024016102439291906107f2565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610291919061088c565b6000604051808303816000865af19150503d80600081146102ce576040519150601f19603f3d011682016040523d82523d6000602084013e6102d3565b606091505b509150915081801561030157506000815114806103005750808060200190518101906102ff91906108db565b5b5b610340576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103379061098b565b60405180910390fd5b5050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff81111561037c5761037b6109ab565b5b6040519080825280601f01601f1916602001820160405280156103ae5781602001600182028036833780820191505090505b506040516103bc919061088c565b60006040518083038185875af1925050503d80600081146103f9576040519150601f19603f3d011682016040523d82523d6000602084013e6103fe565b606091505b5050905080610442576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043990610a4c565b60405180910390fd5b505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd86868660405160240161047b93929190610a6c565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516104c9919061088c565b6000604051808303816000865af19150503d8060008114610506576040519150601f19603f3d011682016040523d82523d6000602084013e61050b565b606091505b5091509150818015610539575060008151148061053857508080602001905181019061053791906108db565b5b5b610578576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056f90610b15565b60405180910390fd5b505050505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105b082610585565b9050919050565b6105c0816105a5565b81146105cb57600080fd5b50565b6000813590506105dd816105b7565b92915050565b6000819050919050565b6105f6816105e3565b811461060157600080fd5b50565b600081359050610613816105ed565b92915050565b60008060008060008060c0878903121561063657610635610580565b5b600061064489828a016105ce565b965050602061065589828a016105ce565b955050604061066689828a01610604565b945050606061067789828a01610604565b935050608061068889828a01610604565b92505060a061069989828a016105ce565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006106e0826105e3565b91506106eb836105e3565b92508282026106f9816105e3565b915082820484148315176107105761070f6106a6565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610751826105e3565b915061075c836105e3565b92508261076c5761076b610717565b5b828204905092915050565b6000610782826105e3565b915061078d836105e3565b92508282039050818111156107a5576107a46106a6565b5b92915050565b6107b4816105e3565b82525050565b60006040820190506107cf60008301856107ab565b6107dc60208301846107ab565b9392505050565b6107ec816105a5565b82525050565b600060408201905061080760008301856107e3565b61081460208301846107ab565b9392505050565b600081519050919050565b600081905092915050565b60005b8381101561084f578082015181840152602081019050610834565b60008484015250505050565b60006108668261081b565b6108708185610826565b9350610880818560208601610831565b80840191505092915050565b6000610898828461085b565b915081905092915050565b60008115159050919050565b6108b8816108a3565b81146108c357600080fd5b50565b6000815190506108d5816108af565b92915050565b6000602082840312156108f1576108f0610580565b5b60006108ff848285016108c6565b91505092915050565b600082825260208201905092915050565b7f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260008201527f616e73666572206661696c656400000000000000000000000000000000000000602082015250565b6000610975602d83610908565b915061098082610919565b604082019050919050565b600060208201905081810360008301526109a481610968565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60008201527f20455448207472616e73666572206661696c6564000000000000000000000000602082015250565b6000610a36603483610908565b9150610a41826109da565b604082019050919050565b60006020820190508181036000830152610a6581610a29565b9050919050565b6000606082019050610a8160008301866107e3565b610a8e60208301856107e3565b610a9b60408301846107ab565b949350505050565b7f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260008201527f616e7366657246726f6d206661696c6564000000000000000000000000000000602082015250565b6000610aff603183610908565b9150610b0a82610aa3565b604082019050919050565b60006020820190508181036000830152610b2e81610af2565b905091905056fea2646970667358221220f076f4430a2ab7fdcab6e1596a88041d457db192af7bada722a41c3a4390a7f964736f6c63430008140033";

type AnteHandlerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AnteHandlerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AnteHandler__factory extends ContractFactory {
  constructor(...args: AnteHandlerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      AnteHandler & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): AnteHandler__factory {
    return super.connect(runner) as AnteHandler__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AnteHandlerInterface {
    return new Interface(_abi) as AnteHandlerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): AnteHandler {
    return new Contract(address, _abi, runner) as unknown as AnteHandler;
  }
}
