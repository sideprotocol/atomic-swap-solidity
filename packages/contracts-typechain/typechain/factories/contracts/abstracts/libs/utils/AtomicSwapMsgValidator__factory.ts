/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  AtomicSwapMsgValidator,
  AtomicSwapMsgValidatorInterface,
} from "../../../../../contracts/abstracts/libs/utils/AtomicSwapMsgValidator";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "contractAddress",
        type: "address",
      },
    ],
    name: "InvalidContractAddress",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "provided",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maximum",
        type: "uint256",
      },
    ],
    name: "InvalidExpirationTime",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMinimumBidLimit",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidReleasePercentage",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidTotalPercentage",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "current",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "expiredTime",
        type: "uint256",
      },
    ],
    name: "OrderAlreadyExpired",
    type: "error",
  },
  {
    inputs: [],
    name: "OverMaximumReleaseStep",
    type: "error",
  },
  {
    inputs: [],
    name: "UnauthorizedCancelAction",
    type: "error",
  },
  {
    inputs: [],
    name: "UnauthorizedSender",
    type: "error",
  },
  {
    inputs: [],
    name: "UnauthorizedTakeAction",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroReleaseSchedule",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_addr",
        type: "address",
      },
    ],
    name: "isContract",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "uuid",
            type: "bytes32",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct IAtomicSwapBase.Coin",
            name: "sellToken",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct IAtomicSwapBase.Coin",
            name: "buyToken",
            type: "tuple",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "desiredTaker",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "minBidAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expireAt",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "acceptBid",
            type: "bool",
          },
        ],
        internalType: "struct IAtomicSwapBase.MakeSwapMsg",
        name: "makeswap",
        type: "tuple",
      },
    ],
    name: "validateMakeSwapParams",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "orderID",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "takerReceiver",
            type: "address",
          },
        ],
        internalType: "struct IAtomicSwapBase.TakeSwapMsg",
        name: "takeswap",
        type: "tuple",
      },
    ],
    name: "validateTakeSwapParams",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "durationInHours",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "percentage",
            type: "uint256",
          },
        ],
        internalType: "struct IAtomicSwapBase.Release[]",
        name: "releases",
        type: "tuple[]",
      },
    ],
    name: "validateVestingParams",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61153c610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c8063162790551461007157806333b988f5146100a15780637aa10b6a146100bd5780639a0ebe00146100d9578063c27eeaac146100f5578063c3aee15d14610111575b600080fd5b61008b60048036038101906100869190610eae565b61012d565b6040516100989190610ef6565b60405180910390f35b6100bb60048036038101906100b691906110f5565b6101bf565b005b6100d760048036038101906100d29190611174565b610583565b005b6100f360048036038101906100ee919061131f565b610799565b005b61010f600480360381019061010a919061139d565b610c45565b005b61012b60048036038101906101269190611174565b610d2a565b005b600061014367c1bf389306182c9060c01b610e2e565b610157671b04126822dbf33d60c01b610e2e565b61016b67d63b23d52f8d368a60c01b610e2e565b60006101816791259554e8c34d6960c01b610e2e565b823b905061019967d1505abbd9434ef360c01b610e2e565b6101ad671877d13b1c237c9060c01b610e2e565b60008163ffffffff1611915050919050565b6101d367369b263f9690876860c01b610e2e565b6101e767f938427120a6f3ff60c01b610e2e565b6101fb674d7f182039e6ee1e60c01b610e2e565b600081510361025e5761021867f96f24f9b0319ad060c01b610e2e565b61022c67ede1b52868e7d9b560c01b610e2e565b6040517ffd68e07a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61027267ffbaecef789645c960c01b610e2e565b61028667dc292fbf9ac6823260c01b610e2e565b61029a678084903cdd1eb77e60c01b610e2e565b60006102b067deb730439fb0f50260c01b610e2e565b6102c4670645b817ba0ec2bd60c01b610e2e565b60005b825181101561043f576102e467c5d25564715597b160c01b610e2e565b6102f8672d1720c60456eef360c01b610e2e565b600083828151811061030d5761030c6113ca565b5b602002602001015160200151905061032f67e6dc8579e07e218d60c01b610e2e565b61034367ef2c9124e4d6f92560c01b610e2e565b600081108015610363575061036267af3bae9488c6a6d960c01b610e31565b5b8061039657506000821180156103795750600081145b80156103955750610394679f4fff4c5ab2306260c01b610e31565b5b5b156103f5576103af67587141bd0b0df3ac60c01b610e2e565b6103c367cb1beec6444d85e760c01b610e2e565b6040517f2b82b70d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61040967a5ed61012fe0ad2660c01b610e2e565b61041d67874c6db9043f459060c01b610e2e565b80836104299190611428565b92505080806104379061145c565b9150506102c7565b506104546728928cb232a8ae9360c01b610e2e565b6104686766c0977e62f4c97760c01b610e2e565b61271081146104cb57610485673358d7ff7abc885f60c01b610e2e565b61049967590a76e29da0f21a60c01b610e2e565b6040517f0b8ad7f100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104df673d6e3f948dfdd11660c01b610e2e565b6104f36717f4f4a97a395e3360c01b610e2e565b61050767d4368f17c4e0e87c60c01b610e2e565b60968251111561056b57610525674384c15004b5c11460c01b610e2e565b610539672b66ff9b8e8dca7960c01b610e2e565b6040517f1531e37f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61057f67a076235c96f89f8e60c01b610e2e565b5050565b61059767883fc49333ed8fad60c01b610e2e565b6105ab6705d48c69fb7eb62160c01b610e2e565b6105bf6740e2193f575a3b8560c01b610e2e565b600073ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415801561067057503373ffffffffffffffffffffffffffffffffffffffff168160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b156106cf5761068967f7d6aa93a578705960c01b610e2e565b61069d67950bb7b2581d8da560c01b610e2e565b6040517fbe544a2b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106e367c612a74ec7639de760c01b610e2e565b6106f76744e15b957b586e5b60c01b610e2e565b61070b679ab7a9f33540424e60c01b610e2e565b4281600b015410156107825761072b67ed926305915a297660c01b610e2e565b61073f672d912f03f72376d960c01b610e2e565b4281600b01546040517f0fe77d7d0000000000000000000000000000000000000000000000000000000081526004016107799291906114b3565b60405180910390fd5b610796678c0813353e78b7e460c01b610e2e565b50565b6107ad672f4e5eca44e2754260c01b610e2e565b6107c1670e6ca030a30e789760c01b610e2e565b6107d567676d459acfc60d7160c01b610e2e565b600073ffffffffffffffffffffffffffffffffffffffff1681602001516000015173ffffffffffffffffffffffffffffffffffffffff1614158015610828575061082681602001516000015161012d565b155b1561089a57610841676b7bfa307e1ac3d760c01b610e2e565b61085567a5b40de701a2a62460c01b610e2e565b8060200151600001516040517f19bb402900000000000000000000000000000000000000000000000000000000815260040161089191906114eb565b60405180910390fd5b6108ae67c65ee3d8c9f2b81d60c01b610e2e565b6108c2674c7b1a5867d2761c60c01b610e2e565b6108d667b97a81df968d5b9d60c01b610e2e565b600073ffffffffffffffffffffffffffffffffffffffff1681604001516000015173ffffffffffffffffffffffffffffffffffffffff1614158015610929575061092781604001516000015161012d565b155b1561099b5761094267f976c18af27ee13060c01b610e2e565b61095667d8dd5e92af980aa960c01b610e2e565b8060400151600001516040517f19bb402900000000000000000000000000000000000000000000000000000000815260040161099291906114eb565b60405180910390fd5b6109af678e492897a3aecd5b60c01b610e2e565b6109c367612b211774508c8760c01b610e2e565b6109d767a5e24a2a7a22c2dc60c01b610e2e565b60008160a0015111610a3d576109f767ba13c666a445755560c01b610e2e565b610a0b67863ed498cb8ae96f60c01b610e2e565b6040517f5fe07c7d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a516724a428a646fbe65760c01b610e2e565b610a6567eb10aa14ce2cd4de60c01b610e2e565b610a7967edbbe5f0cae3906f60c01b610e2e565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015610ac55750610ac4678151889d959616e560c01b610e31565b5b80610b1c5750806060015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015610b1b5750610b1a67d300c262fd71006560c01b610e31565b5b5b15610b7b57610b35673a2ce69b0aee998360c01b610e2e565b610b496746515e70c827de1460c01b610e2e565b6040517f0809490800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b8f67eabe2b01c4c61eee60c01b610e2e565b610ba367b7a56face967b65d60c01b610e2e565b610bb767856afd46824d607b60c01b610e2e565b428160c001511015610c2e57610bd767c7471a008abf357660c01b610e2e565b610beb67cc4f33aa942ccc9360c01b610e2e565b8060c00151426040517ff00605cf000000000000000000000000000000000000000000000000000000008152600401610c259291906114b3565b60405180910390fd5b610c4267e675cda938c3a5cc60c01b610e2e565b50565b610c596723bb30dde6d18cfa60c01b610e2e565b610c6d678acf5421b63ae85360c01b610e2e565b610c8167dd1ad1c152a1b22860c01b610e2e565b600073ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1603610d1357610ccd679e53a895dd234e4160c01b610e2e565b610ce16771ed5647bcd7226b60c01b610e2e565b6040517f0809490800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d2767a1c3017a88fe73a860c01b610e2e565b50565b610d3e677e491f87a95ec46260c01b610e2e565b610d52672350fb6ecdaab46060c01b610e2e565b610d666741137b8b13922e0160c01b610e2e565b3373ffffffffffffffffffffffffffffffffffffffff168160010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e1757610dd1670fa1b2c0e6feb35360c01b610e2e565b610de567b1b2c24944f9198460c01b610e2e565b6040517f978f045600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e2b671738033ac4743bc760c01b610e2e565b50565b50565b600060019050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e7b82610e50565b9050919050565b610e8b81610e70565b8114610e9657600080fd5b50565b600081359050610ea881610e82565b92915050565b600060208284031215610ec457610ec3610e46565b5b6000610ed284828501610e99565b91505092915050565b60008115159050919050565b610ef081610edb565b82525050565b6000602082019050610f0b6000830184610ee7565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610f5f82610f16565b810181811067ffffffffffffffff82111715610f7e57610f7d610f27565b5b80604052505050565b6000610f91610e3c565b9050610f9d8282610f56565b919050565b600067ffffffffffffffff821115610fbd57610fbc610f27565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000819050919050565b610feb81610fd8565b8114610ff657600080fd5b50565b60008135905061100881610fe2565b92915050565b60006040828403121561102457611023610fd3565b5b61102e6040610f87565b9050600061103e84828501610ff9565b600083015250602061105284828501610ff9565b60208301525092915050565b600061107161106c84610fa2565b610f87565b9050808382526020820190506040840283018581111561109457611093610fce565b5b835b818110156110bd57806110a9888261100e565b845260208401935050604081019050611096565b5050509392505050565b600082601f8301126110dc576110db610f11565b5b81356110ec84826020860161105e565b91505092915050565b60006020828403121561110b5761110a610e46565b5b600082013567ffffffffffffffff81111561112957611128610e4b565b5b611135848285016110c7565b91505092915050565b6000819050919050565b6111518161113e565b811461115c57600080fd5b50565b60008135905061116e81611148565b92915050565b60006020828403121561118a57611189610e46565b5b60006111988482850161115f565b91505092915050565b6000819050919050565b6111b4816111a1565b81146111bf57600080fd5b50565b6000813590506111d1816111ab565b92915050565b6000604082840312156111ed576111ec610fd3565b5b6111f76040610f87565b9050600061120784828501610e99565b600083015250602061121b84828501610ff9565b60208301525092915050565b61123081610edb565b811461123b57600080fd5b50565b60008135905061124d81611227565b92915050565b6000610140828403121561126a57611269610fd3565b5b611275610100610f87565b90506000611285848285016111c2565b6000830152506020611299848285016111d7565b60208301525060606112ad848285016111d7565b60408301525060a06112c184828501610e99565b60608301525060c06112d584828501610e99565b60808301525060e06112e984828501610ff9565b60a0830152506101006112fe84828501610ff9565b60c0830152506101206113138482850161123e565b60e08301525092915050565b6000610140828403121561133657611335610e46565b5b600061134484828501611253565b91505092915050565b60006040828403121561136357611362610fd3565b5b61136d6040610f87565b9050600061137d848285016111c2565b600083015250602061139184828501610e99565b60208301525092915050565b6000604082840312156113b3576113b2610e46565b5b60006113c18482850161134d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061143382610fd8565b915061143e83610fd8565b9250828201905080821115611456576114556113f9565b5b92915050565b600061146782610fd8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611499576114986113f9565b5b600182019050919050565b6114ad81610fd8565b82525050565b60006040820190506114c860008301856114a4565b6114d560208301846114a4565b9392505050565b6114e581610e70565b82525050565b600060208201905061150060008301846114dc565b9291505056fea2646970667358221220ecc861410b5910ff00089f8f3d1a5c0ec322433c7fabc289ba685a3a6171a83a64736f6c63430008140033";

type AtomicSwapMsgValidatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AtomicSwapMsgValidatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AtomicSwapMsgValidator__factory extends ContractFactory {
  constructor(...args: AtomicSwapMsgValidatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      AtomicSwapMsgValidator & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): AtomicSwapMsgValidator__factory {
    return super.connect(runner) as AtomicSwapMsgValidator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AtomicSwapMsgValidatorInterface {
    return new Interface(_abi) as AtomicSwapMsgValidatorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): AtomicSwapMsgValidator {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as AtomicSwapMsgValidator;
  }
}
